# -*- coding: utf-8 -*-
"""Untitled27.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16ZPg-pAOuClItT8iOPaKFd44v-_miPDc
"""

import numpy as np
import pandas as pd
import os
import re  #Regular expression
import nltk #for Text manipulation
import string
import warnings
from textblob import TextBlob
warnings.filterwarnings('ignore')
import seaborn as sns
import matplotlib.pyplot as plt
from wordcloud import WordCloud, STOPWORDS
from nltk.tokenize import word_tokenize

pd.set_option('display.max_colwidth',50)

from google.colab import files

df = pd.read_csv('/content/train.csv')
print(df.head())

train = pd.read_csv('/content/train.csv')
test = pd.read_csv('/content/test.csv')

train[train['label']==1]

test.shape, train.shape

train['label'].value_counts()

length_train= train['tweet'].str.len()
length_test= test['tweet'].str.len()
plt.hist(length_train,label='train tweets')
plt.hist(length_test,label='test tweets')
plt.legend()
plt.show()

def remove_pattern(input_txt, pattern):
    r=re.findall(pattern,input_txt)
    for i in r:
        input_txt= re.sub(i,'',input_txt)
    return input_txt

stopwords = set(STOPWORDS)
stopwords.add('user')

def plot_wordcloud(tweets, title):
    wordcloud = WordCloud(width=800, height=800, background_color='white', stopwords=stopwords, min_font_size=10).generate(tweets)
    plt.figure(figsize=(14, 5), facecolor=None)
    plt.imshow(wordcloud)
    plt.axis("off")
    plt.title(title, fontdict={'fontsize': 20})
    plt.show()

negative_tweets = train['tweet'][train['label'] == 1].to_string()
positive_tweets = train['tweet'][train['label'] == 0].to_string()

plot_wordcloud(negative_tweets, 'Negative Tweets')
plot_wordcloud(positive_tweets, 'Positive Tweets')

# Feature Engineering
train_df_fe = train.copy()
train_df_fe['tweet_length'] = train_df_fe['tweet'].str.len()
train_df_fe['num_hashtags'] = train_df_fe['tweet'].str.count('#')
train_df_fe['num_exclamation_marks'] = train_df_fe['tweet'].str.count('!')
train_df_fe['num_question_marks'] = train_df_fe['tweet'].str.count('\?')
train_df_fe['total_tags'] = train_df_fe['tweet'].str.count('@')
train_df_fe['num_punctuations'] = train_df_fe['tweet'].str.count('[.,:;]')
train_df_fe['num_words'] = train_df_fe['tweet'].apply(lambda x: len(x.split()))
train_df_fe.head()

# Visualizing Relationship of Engineered Features with Sentiments
features = ['tweet_length', 'num_hashtags', 'num_exclamation_marks', 'num_question_marks', 'total_tags', 'num_punctuations', 'num_words']

if set(features).issubset(train_df_fe.columns):
    plt.figure(figsize=(10, 10))
    colors = ['skyblue', 'salmon']

    for i, feature in enumerate(features, 1):
        plt.subplot(4, 2, i)
        sns.histplot(train_df_fe[train_df_fe.label == 0][feature], label='Positive', kde=True, color=colors[0])
        sns.histplot(train_df_fe[train_df_fe.label == 1][feature], label='Negative', kde=True, color=colors[1])
        plt.legend()

    plt.tight_layout()
    plt.show()

def sentiment(label):
    if label <0:
        return "Negative"
    elif label>0:
        return "Positive"

def data_processing(text):
    text = text.lower()     #Converting to text to lowercase
    text = re.sub(r'https\S+|www\S+https\S+','',text,flags=re.MULTILINE)   #Removing URL
    text = re.sub(r'\@w+|\#','',text)         #Removing hashtags
    text = re.sub(r'[^\w\s]','',text)         #Removing hashtags
    text_tokens = word_tokenize(text)         #Getting tokens
    filtered_text = [w for w in text_tokens if not w in stopwords]
    return " ".join(filtered_text)

def hashtag_extract(x):
    hashtags=[]
    for i in x:
        ht= re.findall(r'#(\w+)',i)
        hashtags.append(ht)
    return hashtags

word_to_find = "iphone"
iphone_count = df[df['tweet'].str.lower().str.contains(word_to_find)].shape[0]

print(f"The word '{word_to_find}' appears {iphone_count} times in the text.")

word_to_find = "ipad"
ipad_count = df[df['tweet'].str.lower().str.contains(word_to_find)].shape[0]

print(f"The word '{word_to_find}' appears {ipad_count} times in the text.")

iphone_count = df[df['tweet'].str.lower().str.contains("iphone")].shape[0]
ipad_count = df[df['tweet'].str.lower().str.contains("ipad")].shape[0]

sentiment_analysis = {
    "positive": 0,
    "negative": 0,
}
# Organize the data
products = ["iPhone", "iPad"]
counts = [iphone_count, ipad_count]
sentiment = [sentiment_analysis, sentiment_analysis]

# Create a DataFrame
data = pd.DataFrame(list(zip(products, counts, sentiment)), columns = ['Product', 'Count', 'Sentiment'])

# Create a bar chart
plt.figure(figsize=(5, 3))
plt.bar(products, counts, color=['blue', 'green'])
plt.xlabel("Product")
plt.ylabel("Count")
plt.title("Comparison of iPhone and iPad Mentions")
plt.xticks(rotation=0)
plt.tight_layout()

# Display the chart
plt.show()

print("Sentiment Analysis (placeholder):")
print(data.to_string())